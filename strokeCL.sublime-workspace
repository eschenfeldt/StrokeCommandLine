{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"random",
				"randomReal"
			],
			[
				"compa",
				"comparator"
			],
			[
				"comor",
				"comorbid_binary"
			],
			[
				"strat",
				"stratify_everything"
			],
			[
				"sampling",
				"sampling_string\tstatement"
			],
			[
				"compar",
				"comparators"
			],
			[
				"re",
				"required_params\tparam"
			],
			[
				"RE",
				"RESPONSE_SHORT_NAMES\tstatement"
			],
			[
				"inpu",
				"input_ids\tstatement"
			],
			[
				"clus",
				"clusters\tstatement"
			],
			[
				"steroid_",
				"steroid_info_df"
			],
			[
				"ste",
				"ster_types"
			],
			[
				"reports",
				"report_sep"
			],
			[
				"patie",
				"patient_count"
			],
			[
				"In",
				"Inpatient_Outpatient"
			],
			[
				"Out",
				"Outpatient"
			],
			[
				"steroid",
				"steroid_type"
			],
			[
				"Steroi",
				"Steroid_Class"
			],
			[
				"non",
				"non_cream_hits"
			],
			[
				"crem",
				"cream_terms"
			],
			[
				"St",
				"Steroid_Class"
			],
			[
				"is_",
				"is_cream"
			],
			[
				"is",
				"is_steroid"
			],
			[
				"cream",
				"cream_term_hit"
			],
			[
				"cream_",
				"cream_hits"
			],
			[
				"cream_ter",
				"cream_term_hit"
			],
			[
				"either",
				"either_hits"
			],
			[
				"Start",
				"StartDate"
			],
			[
				"start",
				"start_date_col"
			],
			[
				"report",
				"report_texts"
			],
			[
				"match",
				"match_here"
			],
			[
				"desc",
				"description_search"
			],
			[
				"repor",
				"report_df"
			],
			[
				"file",
				"filename"
			],
			[
				"star",
				"start_date_col"
			],
			[
				"text",
				"text_match\tstatement"
			],
			[
				"des",
				"description_search\tparam"
			],
			[
				"valu",
				"value_counts"
			],
			[
				"Di",
				"Disease\tclass"
			],
			[
				"Dis",
				"DiseaseCodes\tclass"
			],
			[
				"para",
				"params\tparam"
			],
			[
				"inde",
				"index_truth\tparam"
			],
			[
				"out",
				"outcome\tparam"
			],
			[
				"param",
				"param_cut\tstatement"
			],
			[
				"RUN",
				"RuntimeWarning\tclass"
			],
			[
				"NotImp",
				"NotImplementedError\tclass"
			],
			[
				"includ",
				"include_charlson"
			],
			[
				"CH",
				"Charlson_index"
			],
			[
				"inclu",
				"include_charlson"
			],
			[
				"same",
				"same_day"
			],
			[
				"befor",
				"before_end\tstatement"
			],
			[
				"afte",
				"after_start\tstatement"
			],
			[
				"ent",
				"entry_date\tparam"
			],
			[
				"combo",
				"combo_db\tstatement"
			],
			[
				"custom",
				"custom_visit_identifier\tparam"
			],
			[
				"custo",
				"custom_filter_name\tparam"
			],
			[
				"any",
				"any_dia\tstatement"
			],
			[
				"DIAG",
				"DIAGNOSED_STATE"
			],
			[
				"cust",
				"custom_visit_identifier"
			],
			[
				"cus",
				"custom_filter_column"
			],
			[
				"cmb",
				"cmb10\tstatement"
			],
			[
				"cm",
				"cmb10\tstatement"
			],
			[
				"outc",
				"outcome_info\tparam"
			],
			[
				"index",
				"index_truth"
			],
			[
				"idne",
				"index_truth\tparam"
			],
			[
				"ind",
				"index_truth\tparam"
			],
			[
				"stri",
				"stringify_dataframe\tfunction"
			],
			[
				"ad",
				"additional_index_levels\tparam"
			],
			[
				"addi",
				"additional_index_level\tstatement"
			],
			[
				"rea",
				"read_db\tfunction"
			],
			[
				"read",
				"read_or_rebuild\tfunction"
			],
			[
				"death",
				"DeathFLG"
			],
			[
				"MET",
				"METAVISION_TIME_SERIES\tstatement"
			],
			[
				"data",
				"data_io\tmodule"
			],
			[
				"Inter",
				"Interpolation"
			],
			[
				"miss",
				"missing_index"
			],
			[
				"mis",
				"missing_index_cols"
			],
			[
				"inc",
				"include_charlson"
			],
			[
				"get_",
				"get_ts_name\tfunction"
			],
			[
				"id",
				"id_string\tstatement"
			],
			[
				"include",
				"include_charlson\tparam"
			],
			[
				"ch",
				"Charlson_index"
			],
			[
				"rese",
				"reset_index"
			],
			[
				"pands",
				"pandas2ri\tmodule"
			],
			[
				"comorb",
				"comorbidities"
			],
			[
				"cache",
				"cache_file"
			],
			[
				"cac",
				"cache_file\tstatement"
			],
			[
				"DB",
				"DB_CACHE_FOLDER\tstatement"
			],
			[
				"str",
				"stringify_dataframe\tfunction"
			],
			[
				"use",
				"use_cache\tparam"
			],
			[
				"DATA",
				"DATA_FOLDER\tstatement"
			],
			[
				"filte",
				"filter_db\tstatement"
			],
			[
				"date",
				"date_filter\tfunction"
			],
			[
				"db_",
				"db_clean"
			],
			[
				"fil",
				"filter_col\tstatement"
			],
			[
				"join",
				"join_filter_db\tparam"
			],
			[
				"get_f",
				"get_first_dia\tfunction"
			],
			[
				"filter",
				"filter_db\tstatement"
			],
			[
				"ml",
				"ml_status\tparam"
			],
			[
				"cu",
				"custom_filter_name\tparam"
			],
			[
				"get_fi",
				"get_first_procedure\tfunction"
			],
			[
				"censo",
				"censor_as_event\tparam"
			],
			[
				"reb",
				"rebuild\tparam"
			],
			[
				"sto",
				"store_db\tfunction"
			],
			[
				"from",
				"from_product"
			],
			[
				"Multi",
				"MultiIndex"
			],
			[
				"rebu",
				"rebuild_dem\tparam"
			],
			[
				"app",
				"approximate_unknown_deaths\tparam"
			],
			[
				"appr",
				"approximate_unknown_deaths"
			],
			[
				"ce",
				"censor_as_event\tstatement"
			],
			[
				"cen",
				"censor_as_event\tparam"
			],
			[
				"event_",
				"event_observed\tstatement"
			],
			[
				"updat",
				"updated_death_flag"
			],
			[
				"update",
				"updated_death_flag\tstatement"
			],
			[
				"upda",
				"updated_dts_name"
			],
			[
				"deat",
				"DeathDTS"
			],
			[
				"by",
				"bytes_\tstatement"
			],
			[
				"exam",
				"example\tparam"
			],
			[
				"exa",
				"example_str"
			],
			[
				"exampel",
				"Example"
			],
			[
				"TF",
				"tf_record_iterator\tfunction"
			],
			[
				"canc",
				"cancer_string"
			],
			[
				"TFRecord",
				"TFRecordWriter\tclass"
			],
			[
				"fi",
				"filterwarnings\tfunction"
			],
			[
				"ca",
				"cancer_known\tfunction"
			],
			[
				"source",
				"source_name\tstatement"
			],
			[
				"seg",
				"seg_name\tparam"
			],
			[
				"sour",
				"source_name\tstatement"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import Foundation\nimport Dispatch\n\npublic final class StrokeModel {\n    private let arguments: [String]\n\n    private let evals_per_set = 1000\n    private let sex = Sex.female\n    private let age = 80\n    private let race: Double = 7\n    private let time_since_symptoms: Double = 45\n    private let time_to_primaries: [Double] = [25, 35, 50]\n    private let time_to_comprehensives: [Double] = [60]\n    private let transfer_times: [Double] = [45, 30, 15]\n\n    private var mi: ModelInputs {\n        let times = zip(time_to_primaries, transfer_times)\n        var primaries: [StrokeCenter] = []\n        for (index, (time, transfer_time)) in times.enumerated() {\n            primaries.append(StrokeCenter(primaryFromTime: time, transfer_time: transfer_time, index: index))\n        }\n\n        var comprehensives: [StrokeCenter] = []\n        for (index, time) in time_to_comprehensives.enumerated() {\n            comprehensives.append(StrokeCenter(comprehensiveFromTime: time, index: index))\n        }\n\n        return ModelInputs(sex: sex, age: age, race: race, time_since_symptoms: time_since_symptoms,\n                           primaries: primaries, comprehensives: comprehensives)\n    }\n\n    public init(arguments: [String] = CommandLine.arguments) {\n        self.arguments = arguments\n    }\n\n    public func run() throws {\n\n        guard time_to_primaries.count == transfer_times.count else {\n            throw Error.primaryTimesMismatch\n        }\n\n        let start = DispatchTime.now()\n        let results = run_with_variance(mi, simulation_count: evals_per_set,\n                                        completion_handler: {_, _ in })\n        let end = DispatchTime.now()\n        let nano_time = end.uptimeNanoseconds - start.uptimeNanoseconds\n        let sim_time = Double(nano_time) / 1_000_000_000\n\n        print(results.string)\n        print(\"\\nSimulation time: \\(sim_time) seconds\")\n\n    }\n\n}\n\npublic extension StrokeModel {\n    enum Error: Swift.Error {\n        case primaryTimesMismatch\n    }\n}\n\nextension StrokeCenter {\n    convenience init(primaryFromTime time: Double, transfer_time: Double, index: Int = 1) {\n        let destination = StrokeCenter(comprehensiveFromFullName: \"Destination \\(index)\")\n        self.init(primaryFromFullName: \"Primary  \\(index)\", time: time, transferDestination: destination, transferTime: transfer_time)\n    }\n    convenience init(comprehensiveFromTime time: Double, index: Int = 1) {\n        self.init(comprehensiveFromFullName: \"Comprehensive \\(index)\", time: time)\n    }\n}\n",
			"file": "Sources/StrokeCommandLineModel/StrokeModel.swift",
			"file_size": 2516,
			"file_write_time": 131669046545968603,
			"settings":
			{
				"buffer_size": 2516,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sources/StrokeCommandLineModel/Model/stroke_center.swift",
			"settings":
			{
				"buffer_size": 2098,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//\n//  ais_outcomes.swift\n//  Stroke\n//\n//  Created by Patrick Eschenfeldt (ITA) on 10/2/17.\n//  Copyright Â© 2017 MGH Institute for Technology Assessment. All rights reserved.\n//\n\nimport Foundation\n\nfunc p_lvo_given_ais(race: Double, add_uncertainty: Bool) -> Double{\n    func p_lvo_logistic_helper(b0: Double, b1: Double, race: Double) -> Double {\n        return 1.0 / (1.0 + exp(-b0 - b1 * race))\n    }\n    var p_lvo: Double\n    if add_uncertainty {\n        let lower = p_lvo_logistic_helper(b0: -3.6526, b1: 0.4141, race: race)\n        let upper = p_lvo_logistic_helper(b0: -2.2067, b1: 0.6925, race: race)\n        p_lvo = drand48() * (upper - lower) + lower\n    } else {\n        p_lvo = p_lvo_logistic_helper(b0: -2.9297, b1: 0.5533, race: race)\n    }\n    return p_lvo\n}\n\nfunc p_good_outcome_post_evt_success(time_onset_reperfusion: Double,\n                                     nihss: Double) -> Double{\n    let beta = (-0.00879544 - 9.01419716e-05 * time_onset_reperfusion)\n    return exp(beta * nihss)\n}\n\nfunc p_good_outcome_no_reperfusion(nihss: Double) -> Double{\n    if nihss >= 20{\n        return 0.05\n    } else{\n        return (-0.0464 * nihss) + 1.0071\n    }\n}\n\nfunc p_good_outcome_ais_no_lvo_got_tpa(time_onset_tpa: Double,\n                                       nihss: Double) -> Double{\n    let baseline_prob = 0.001 * pow(nihss, 2) - 0.0615 * nihss + 1\n    if time_onset_tpa > time_limit_tpa(){\n        return baseline_prob\n    } else{\n        let odds_ratio = -0.0031 * time_onset_tpa + 2.068\n        let baseline_prob_to_odds = baseline_prob / (1 - baseline_prob)\n        let new_odds = baseline_prob_to_odds * odds_ratio\n        let adjusted_prob = new_odds / (1 + new_odds)\n        return adjusted_prob\n    }\n}\n\nfunc p_reperfusion_endovascular() -> Double{\n    return 0.71\n}\n\nfunc p_early_reperfusion_thrombolysis(time_to_groin: Double) -> Double{\n    return 0.18 * min(70, time_to_groin) / 70\n}\n\nstruct IschemicModel{\n    \n    // Stored Properties\n    let sex: Sex\n    let age: Int\n    let race: Double\n    let time_since_symptoms: Double\n    let primaries: [StrokeCenter]\n    let comprehensives: [StrokeCenter]\n    let times: IntraHospitalTimes\n    let p_lvo: Double\n    \n    // Computed Properties\n    var nihss: Double{\n        return race_to_nihss(race: race)\n    }\n\n    var min_primary: StrokeCenter {\n        return primaries.min { l, r in l.time! < r.time! }! // There has to be at least one primary\n    }\n\n    var min_comprehensive: StrokeCenter {\n        return comprehensives.min { l, r in l.time! < r.time! }! // There has to be at least one comprehensive\n    }\n\n    var min_onset_needle_primary: Double {\n        return (time_since_symptoms + min_primary.time! +\n                times.door_to_needle_primary)\n    }\n\n    var min_onset_evt_noship: Double {\n        return (time_since_symptoms + min_comprehensive.time! +\n                times.door_to_intra_arterial)\n    }\n\n    var model_is_necessary: Bool {\n        return (min_onset_needle_primary <= time_limit_tpa() ||\n                min_onset_evt_noship <= time_limit_evt())\n    }\n    var cutoff_location: Strategy? {\n        if model_is_necessary {\n            return nil\n        } else {\n            return no_tx_where_to_go(race: race)\n        }\n    }\n    \n    // Methods\n    init(_ mi: ModelInputs,\n         add_time_uncertainty: Bool = false,\n         add_lvo_uncertainty: Bool = false) {\n        sex = mi.sex\n        age = mi.age\n        race = mi.race\n        time_since_symptoms = mi.time_since_symptoms\n        primaries = mi.primaries\n        comprehensives = mi.comprehensives\n        times = IntraHospitalTimes(with_uncertainty: add_time_uncertainty)\n        p_lvo = p_lvo_given_ais(race: race, add_uncertainty: add_lvo_uncertainty)\n    }\n\n    func no_tx_where_to_go(race: Double) -> Strategy {\n        if race >= 5.0 {\n            return .comprehensive(min_comprehensive)\n        } else {\n            return .primary(min_primary)\n        }\n    }\n\n    func onset_needle_primary(usingHospital primary: StrokeCenter) -> Double {\n        return (time_since_symptoms + primary.time! +\n                times.door_to_needle_primary)\n    }\n    func onset_needle_comprehensive(usingHospital comprehensive: StrokeCenter) -> Double {\n        return (time_since_symptoms + comprehensive.time! +\n                times.door_to_needle_comprehensive)\n    }\n    func onset_evt_noship(usingHospital comprehensive: StrokeCenter) -> Double {\n        return (time_since_symptoms + comprehensive.time! +\n                times.door_to_intra_arterial)\n    }\n    func onset_evt_ship(usingHospital primary: StrokeCenter) -> Double {\n        return (time_since_symptoms + primary.time! +\n                times.door_to_needle_primary + primary.transfer_time! +\n                times.transfer_to_intra_arterial)\n    }\n    \n    func get_ais_outcomes(key: Strategy) -> Outcome? {\n        switch key {\n        case .primary(let hospital):\n            return run_primary_center(usingHospital: hospital)\n        case .comprehensive(let hospital):\n            return run_comprehensive_center(usingHospital: hospital)\n        case .drip_and_ship(let hospital):\n            return run_primary_then_ship(usingHospital: hospital)\n        case .based_on_cutoff:\n            return nil\n        }\n    }\n    \n    func run_primary_center(usingHospital primary: StrokeCenter) -> Outcome {\n        let p_good = get_p_good(onset_to_tpa: onset_needle_primary(usingHospital: primary),\n                                onset_to_evt: nil)\n        let p_tpa = 1.0\n        let p_evt = 0.0\n        let p_transfer = 0.0\n        \n        return Outcome(p_good: p_good, p_tpa: p_tpa,\n                       p_evt: p_evt, p_transfer: p_transfer)\n    }\n    \n    func run_comprehensive_center(usingHospital comprehensive: StrokeCenter) -> Outcome {\n        \n        let p_transfer = 0.0\n        var p_tpa = 0.0\n        let p_evt = p_lvo\n        if onset_needle_comprehensive(usingHospital: comprehensive) < time_limit_tpa() {\n            p_tpa = 1.0\n        }\n        let p_good = get_p_good(onset_to_tpa: onset_needle_comprehensive(usingHospital: comprehensive),\n                                onset_to_evt: onset_evt_noship(usingHospital: comprehensive))\n        \n        return Outcome(p_good: p_good, p_tpa: p_tpa,\n                       p_evt: p_evt, p_transfer: p_transfer)\n    }\n    \n    func run_primary_then_ship(usingHospital primary: StrokeCenter) -> Outcome? {\n        \n        if onset_evt_ship(usingHospital: primary) > time_limit_evt() {\n            return nil\n        } else {\n            let p_tpa = 1.0\n            let p_evt = p_lvo\n            let p_transfer = 1.0\n            let p_good = get_p_good(onset_to_tpa: onset_needle_primary(usingHospital: primary),\n                                    onset_to_evt: onset_evt_ship(usingHospital: primary))\n            \n            return Outcome(p_good: p_good, p_tpa: p_tpa,\n                           p_evt: p_evt, p_transfer: p_transfer)\n        }\n        \n        \n    }\n    \n    func get_p_good(onset_to_tpa: Double, onset_to_evt: Double?) -> Double {\n        \n        var p_good = 0.0\n        \n        let baseline_p_good = p_good_outcome_ais_no_lvo_got_tpa(\n            time_onset_tpa: onset_to_tpa, nihss: nihss)\n        \n        p_good += ((1 - p_lvo) * baseline_p_good)\n        \n        var p_reperfused = 0.0\n        var p_not_reperfused = p_lvo\n        \n        if onset_to_evt != nil {\n            p_reperfused = p_lvo * p_reperfusion_endovascular()\n            p_not_reperfused -= p_reperfused\n        }\n        \n        p_good += p_not_reperfused * baseline_p_good\n        \n        if let onset_to_evt_time = onset_to_evt {\n            let p_good_post_evt = p_good_outcome_post_evt_success(\n                time_onset_reperfusion: onset_to_evt_time, nihss: nihss)\n            var higher_p_good = p_good_post_evt\n            if higher_p_good < baseline_p_good{\n                higher_p_good = baseline_p_good\n            }\n            p_good += p_reperfused * higher_p_good\n        }\n        return p_good\n    }\n}\n\nstruct Outcome {\n    let p_good: Double\n    let p_tpa: Double\n    let p_evt: Double\n    let p_transfer: Double\n}\n",
			"file": "Sources/StrokeCommandLineModel/Model/ais_outcomes.swift",
			"file_size": 8148,
			"file_write_time": 131668340290000000,
			"settings":
			{
				"buffer_size": 8147,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Package.swift",
			"settings":
			{
				"buffer_size": 730,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sources/StrokeCommandLineModel/Model/create_random_sets.swift",
			"settings":
			{
				"buffer_size": 2877,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sources/StrokeCommandLine/main.swift",
			"settings":
			{
				"buffer_size": 223,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 71.0,
		"last_filter": "show",
		"selected_items":
		[
			[
				"show",
				"Anaconda: Show error list"
			],
			[
				"disab",
				"Anaconda: Disable linting on this file"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"an",
				"Anaconda: Show error list"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"ana",
				"Anaconda: Show error list"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"markdownP",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markd",
				"Markdown Preview: Save to HTML"
			],
			[
				"buildv",
				"Disable/Enable buildview for this window"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"anaconda er",
				"Anaconda: Show error list"
			],
			[
				"anaconda li",
				"Anaconda: Next lint error"
			]
		],
		"width": 412.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"sys.version",
			"import sys",
			"python",
			"sys.version",
			"import sys",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 55954))",
			"for x in [1,2]:",
			"for x in 1:5:",
			"5 + 5",
			"help()",
			"help",
			"python",
			"import Sys",
			"which python",
			"import numpy as np",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 63707))"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Dropbox (Partners HealthCare)/Stroke/StrokeCommandLine/Sources",
		"/E/Dropbox (Partners HealthCare)/Stroke/StrokeCommandLine/Sources/StrokeCommandLine"
	],
	"file_history":
	[
		"/C/Users/peschenfeldt/Desktop/scratch.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/metavision_cluster_tests_n=1000.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/metavision_cluster_tests_n=10.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/db_clean.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/projects/toxicity.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/comorbidities.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/basic_info.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/data_io/sql.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/meds.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/survival.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/synthesize.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/roc.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/meta_bp_cluster_basic.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/chest_ct_reports.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/snapshot_assays.txt",
		"/C/Users/peschenfeldt/AppData/Local/Microsoft/Windows/INetCache/Content.Outlook/U11M30ZW/snapshot_assays.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_selection/random_forest.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/pre-2017_colonoscopy_reports.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/pre-2017_colon_path_reports.txt",
		"/C/Users/peschenfeldt/.conda/environments.txt",
		"/C/Users/peschenfeldt/.condarc",
		"/E/Dropbox (Partners HealthCare)/stroke_web_app/~.condarc",
		"/E/Dropbox (Partners HealthCare)/Misc/scratch.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/db_stats.py",
		"/E/Dropbox (Partners HealthCare)/Misc/Ubuntu update commands.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/projects/liver_tensorflow.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/data_io/ses.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/med_comps_limit=after_gap=None.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/med_comps_limit=after_gap=None_ref=recent.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/med_comps_gap=None_ref=any.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/med_comps_limit=after_gap=None_ref=any.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/rf_importance/esophagus/gap=5_limit=after_just_any.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer.yml",
		"/C/Users/peschenfeldt/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/eso_death_update.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/eso_patients.csv",
		"/E/Dropbox (Partners HealthCare)/Metavision/Sleep Apnea/python/tf_model.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/projects/liver_images.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/2017_colon_path_reports.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/2017_colon_path_reports_recent.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/2017_colonoscopy_recent_reports.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/2017_colonoscopy_reports.txt",
		"/C/Users/peschenfeldt/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_selection/univariate.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/data_io/file_processing.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/text_analysis.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/phy.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/data_io/databases.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/.hgignore",
		"/E/Dropbox (Partners HealthCare)/Metavision/manuscripts/Long Recovery/PLOS ONE/revision/revised.tex",
		"/E/Dropbox (Partners HealthCare)/Metavision/output/Long Recovery/paper/2017-04-27_all_Date.Num_Long_69_23584_csv.txt",
		"/E/Dropbox (Partners HealthCare)/Metavision/output/Long Recovery/paper/univariate/_multivariate.txt",
		"/E/Dropbox (Partners HealthCare)/Metavision/output/Long Recovery/paper/univariate/Age.txt",
		"/E/Dropbox (Partners HealthCare)/stroke_project/model/input/scenarios.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/.hginore",
		"/E/Dropbox (Partners HealthCare)/Cancer/misc/toxicity variables first pass",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/R/2018-02-05_toxicity_1_1060_adaptive_lasso_fit.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/R/basic_logistic.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/R/2018-02-05_toxicity_1_1060_lasso_fit.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/R/2018-02-05_toxicity_1_1060_csv.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/aff_download/ACS_10_5YR_DP03_metadata.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/univariate/Confirmed_Admission_summary_num.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/import_batch.py",
		"/E/Dropbox (Partners HealthCare)/Checkpoint Inhibitor Toxicity Study/dfc17_011218111842227799_Dia.txt",
		"/E/Dropbox (Partners HealthCare)/Checkpoint Inhibitor Toxicity Study/dfc17_011218111842227799_Dem.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/portable scripts/rpdr/import_rpdr.py",
		"/E/Dropbox (Partners HealthCare)/Lung/data/Patient_info_Adeno.csv",
		"/E/Dropbox (Partners HealthCare)/Lung/data/Patient_info_All.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/gap=5_limit=before_ref=recent.csv",
		"/E/Dropbox (Partners HealthCare)/Lung/data/nlst_357_prsn_20170929.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/univariate/eso_rf_survival.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/esophagus/gap=None_limit=None_just_any.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/README.md",
		"/E/Dropbox (Partners HealthCare)/Random Programming/R Packages/randomForestSRC/src/Makevars.win",
		"/E/Dropbox (Partners HealthCare)/Random Programming/R Packages/randomForestSRC/src/Makevars.in",
		"/C/Rtools/README.txt",
		"/E/Dropbox (Partners HealthCare)/Stroke/p_lvo_data.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/generate_summary_plots.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/input/metavision/multiple.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/input/metavision/sums.txt",
		"/E/Dropbox (Partners HealthCare)/Metavision/data/RPDR (raw)/Batch 1/PCE3__062017150351931382_MGH_Rfv.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/input/metavision/singletons.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision/metavision_multiple.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision/metavision_singletons.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision/metavision_sums.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision_sums.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision_multiple.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/metavision_singletons.txt",
		"/E/Dropbox (Partners HealthCare)/stroke_project/model/app.py",
		"/E/Dropbox (Partners HealthCare)/Misc/commands/lung.cmd",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/liver_raw/CH925_20171030_131605_MGH_Let.txt",
		"/E/Dropbox (Partners HealthCare)/Liver RPDR/Raw Files/Batch 3/CH925_20171030_131928_MGH_Pal.txt",
		"/E/Dropbox (Partners HealthCare)/Liver RPDR/Raw Files/Batch 1/CH925_20170502_131419_MGH_Lab.txt",
		"/E/Dropbox (Partners HealthCare)/Liver RPDR/Raw Files/Batch 1/CH925_20170502_131419_MGH_Trn.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/misc/out_of_date/db_stats.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/logistic.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/constants.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/utilities.py",
		"/E/Dropbox (Partners HealthCare)/Random Programming/tensorflow/word2vec.py",
		"/E/Dropbox (Partners HealthCare)/Random Programming/tensorflow/word2vec_basic.py",
		"/E/Dropbox (Partners HealthCare)/Misc/commands/cancer.cmd",
		"/E/Dropbox (Partners HealthCare)/Misc/commands/stroke.bat",
		"/C/Users/peschenfeldt/AppData/Roaming/Sublime Text 3/Packages/User/WordCount.sublime-settings",
		"/C/Users/peschenfeldt/AppData/Roaming/Sublime Text 3/Packages/WordCount/WordCount.sublime-settings",
		"/F/nlst_357_path_list_20170929.csv",
		"/F/readme.txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/data/test.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/univariate/Endoscopy_prelim_cat.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/output/univariate/Endoscopy_prelim_num.csv",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/scratch.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/__init__.py",
		"/E/Dropbox (Partners HealthCare)/Cancer_shared/python/cancer.yml",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/README.html",
		"/C/Users/peschenfeldt/Downloads/- (1).txt",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/.hgignore",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/drugstandards-master/README.md",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/data_model.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/classifier_output.py",
		"/E/Dropbox (Partners HealthCare)/Cancer/python/cancer/analysis/README.md",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/README.md",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/constants.py",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_selection/feature_selection.py",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_selection/univariate.py",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_selection/README.md",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/meds.py",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/basic_info.py",
		"/Users/peschenfeldt-ita/Dropbox (Partners HealthCare)/Cancer/python/cancer/feature_creation/db_clean.py"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"arc4random",
			"get_centroid_df",
			"ts_to_slice",
			"tsc",
			"_where",
			"index",
			"info_types",
			"steroid_type",
			"same-",
			"same-day",
			"log_message",
			"data.",
			"cols=",
			"cutoff",
			"db",
			"name",
			"procedure",
			"outcome",
			"db.",
			"db",
			"db.",
			"db.DATA_FOLDER",
			"income",
			"flu",
			"log_mes",
			"Result",
			"db[d",
			"data",
			"_prep_drug_db",
			"db",
			"disease",
			"db",
			"ut.",
			"pyodbc",
			"ut.",
			"update_age",
			"TEST",
			"']",
			"ed.",
			".va",
			".value",
			"value",
			"ed.",
			"top",
			"db",
			"disease",
			"Disease",
			"P002301980",
			"vis_file",
			"include_s",
			"T3",
			"T1",
			"db",
			"white",
			"race",
			";}",
			"slope",
			"start_query(",
			"DIA",
			"EXTENDED",
			"where(",
			"where_code(",
			"sql_conn(",
			"select(",
			"sqlize",
			"phy",
			"sleep",
			"name",
			"codes=Pan",
			"context_df",
			"self",
			"context_data",
			"FLAGS",
			"epoch",
			".shape",
			"batch_size",
			"30",
			"dia",
			"SA_CODES",
			"lazy_property",
			"lengths",
			"length",
			"sets",
			"long",
			"zero",
			"variables",
			"FULL_ISNULL",
			"Metavision",
			"Start",
			"base_time",
			"names",
			"np.n",
			"db",
			"HDF_STORE",
			"print",
			"line_num",
			"readline",
			"type",
			"store_new",
			"update",
			"before",
			"pT0"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"st",
			"data",
			"out",
			"Value",
			"codes",
			"db_name",
			"",
			"out",
			"rep_file",
			"out",
			"_start_query(",
			"_where(",
			"_where_code(",
			"_sql_conn(",
			"_sqlize",
			"df",
			"data",
			"define_scope",
			"length",
			"wide",
			"MetaVision",
			"full",
			"DATA_STORE",
			"this",
			"none",
			"after"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Sources/StrokeCommandLineModel/StrokeModel.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2516,
						"regions":
						{
						},
						"selection":
						[
							[
								994,
								994
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 4,
								"count": 155,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Sources/StrokeCommandLineModel/Model/stroke_center.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2098,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 1,
								"count": 138,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Sources/StrokeCommandLineModel/Model/ais_outcomes.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8147,
						"regions":
						{
						},
						"selection":
						[
							[
								755,
								755
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 0,
								"count": 444,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1755.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Package.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 730,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 0,
								"count": 81,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Sources/StrokeCommandLineModel/Model/create_random_sets.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2877,
						"regions":
						{
						},
						"selection":
						[
							[
								205,
								2876
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 1266,
								"count": 158,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 429.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Sources/StrokeCommandLine/main.swift",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 223,
						"regions":
						{
						},
						"selection":
						[
							[
								122,
								122
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 47,
								"count": 13,
								"modified": true,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Swift/Syntaxes/Swift.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 88.0
	},
	"output.markdown":
	{
		"height": 90.0
	},
	"pinned_build_system": "",
	"project": "strokeCL.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"d",
				"E:\\Dropbox (Partners HealthCare)\\Metavision\\manuscripts\\Long Recovery\\Draft.tex"
			],
			[
				"",
				"Build output"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 225.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
